#
# SecureKey Technologies Inc. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

version: '3'

services:

  hydra:
    container_name: hydra.trustbloc.local
    image: oryd/hydra:v1.3.2-alpine
    ports:
      - "4444:4444" # Public port
      - "4445:4445" # Admin port
    command:  /bin/sh -c "hydra migrate sql --read-from-env --yes;tmp/hydra_configure.sh& hydra serve all"
    entrypoint: ""
    environment:
      - DSN=mysql://root:secret@tcp(mysql:3306)/mysql?max_conns=20&max_idle_conns=4
      - URLS_SELF_ISSUER=https://hydra.trustbloc.local
      - URLS_CONSENT=https://consent-login.trustbloc.local/consent
      - URLS_LOGIN=https://consent-login.trustbloc.local/login
      - URLS_LOGOUT=https://consent-login.trustbloc.local/logout
      - SECRETS_SYSTEM=testSecretsSystem
      - OIDC_SUBJECT_TYPES_SUPPORTED=public,pairwise
      - OIDC_SUBJECT_TYPE_PAIRWISE_SALT=testSecretsSystem
      - SERVE_TLS_KEY_PATH=/etc/tls/trustbloc.local.key
      - SERVE_TLS_CERT_PATH=/etc/tls/trustbloc.local.crt
      - VIRTUAL_HOST=hydra.trustbloc.local
      - VIRTUAL_PORT=4444
      - VIRTUAL_PROTO=https
    restart: unless-stopped
    volumes:
      - ../scripts/hydra_configure.sh:/tmp/hydra_configure.sh
      - ../keys/tls:/etc/tls
    depends_on:
      - mysql
    networks:
      - demo-net

  oathkeeper-proxy:
    image: oryd/oathkeeper:v0.35.1-alpine
    ports:
      - "4455:4455"
    # will add self-signed certificate to the “trusted list” because oathkeeper doesn't trust self-signed certificate
    # https://github.com/ory/oathkeeper/issues/181
    # remove it when using real certificate
    command:  /bin/sh -c "cp /etc/tls/trustbloc-dev-ca.crt /usr/local/share/ca-certificates/;update-ca-certificates;oathkeeper serve proxy --config /oathkeeper/config.yaml"
    user: root
    entrypoint: ""
    environment:
      - LOG_LEVEL=debug
      - PORT=4455
      - ISSUER_URL=https://oathkeeper-proxy.trustbloc.local
      - VIRTUAL_HOST=oathkeeper-proxy.trustbloc.local
      - VIRTUAL_PORT=4455
    restart: on-failure
    volumes:
      - ../oathkeeper:/oathkeeper
      - ../keys/tls:/etc/tls
    networks:
      - demo-net

  strapi:
    container_name: strapi
    image: strapi/strapi:3.0.6-alpine
    entrypoint: ""
    command:  /bin/sh -c "/usr/local/bin/docker-entrypoint.sh strapi;/tmp/strapi_configure.sh& strapi develop"
    environment:
      - DATABASE_CLIENT=mysql
      - DATABASE_HOST=mysql
      - DATABASE_PORT=3306
      - DATABASE_NAME=strapi
      - DATABASE_USERNAME=user
      - DATABASE_PASSWORD=secret
      - VIRTUAL_HOST=cms.trustbloc.local
    ports:
      - 1337:1337
    volumes:
      - ../scripts/strapi_configure.sh:/tmp/strapi_configure.sh
      - ../oathkeeper:/oathkeeper
    depends_on:
      - mysql
    networks:
      - demo-net

  mysql:
    container_name: mysql
    image: mysql:8.0.20
    restart: always
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: secret
    logging:
      driver: "none"
    volumes:
      - ../scripts/mysql:/docker-entrypoint-initdb.d
    networks:
      - demo-net

  nginx-proxy:
    image: jwilder/nginx-proxy
    ports:
      - "443:443"
    volumes:
      - ../keys/tls:/etc/nginx/certs
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      demo-net:
        aliases:
          - testnet.trustbloc.local
          - stakeholder-one.trustbloc.local
          - sidetree-mock.trustbloc.local
          - issuer-vcs.trustbloc.local
          - rp-vcs.trustbloc.local
          - governance-vcs.trustbloc.local
          - hydra.trustbloc.local
          - mock-bank.trustbloc.local
          - oathkeeper-proxy.trustbloc.local
          - edv.trustbloc.local
          - kms.trustbloc.local
          - uni-resolver-web.trustbloc.local
          - uni-registrar-web.trustbloc.local
          - did-resolver.trustbloc.local
          - consent-login.trustbloc.local
          - mock-bank-consent-login.trustbloc.local
          - issuer.trustbloc.local
          - issuer-adapter.trustbloc.local
          - rp.trustbloc.local
          - upload.cred.trustbloc.local
          - rp-adapter.trustbloc.local
          - rp-adapter-hydra.trustbloc.local
          - peer0-org1.trustbloc.local
          - peer1-org1.trustbloc.local
          - peer0-org2.trustbloc.local
          - peer1-org2.trustbloc.local
          - peer0-org3.trustbloc.local
          - peer1-org3.trustbloc.local
          - org1.trustbloc.local
          - org2.trustbloc.local
          - org3.trustbloc.local

  shared.couchdb:
    container_name: shared.couchdb
    image: ${COUCHDB_FIXTURE_IMAGE}:${COUCHDB_FIXTURE_TAG}
    ports:
      - 5984:5984
    environment:
      - DB_URL=http://localhost:5984/member_db
      - COUCHDB_USER=${COUCHDB_USERNAME}
      - COUCHDB_PASSWORD=${COUCHDB_PASSWORD}
    volumes:
      - ../couchDB/config.ini:/opt/couchdb/etc/local.d/config.ini
    logging:
      driver: none
    networks:
      - demo-net

  consent.login.com:
    container_name: consent.login.com
    image: ${CONSENT_LOGIN_SERVER_IMAGE}:latest
    environment:
      # will access hydra admin through container directly because nginx-proxy doesn't support multiple ports per virtual host
      - ADMIN_URL=${HYDRA_ADMIN_URL}
      - SERVE_PORT=3300
      - TLS_CACERTS=/etc/tls/trustbloc-dev-ca.crt
      - VIRTUAL_HOST=consent-login.trustbloc.local
    ports:
      - 3300:3300
    volumes:
      - ../keys/tls:/etc/tls
    networks:
      - demo-net

  mock.bank.consent.login.com:
    container_name: mock.bank.consent.login.com
    image: ${CONSENT_LOGIN_SERVER_IMAGE}:latest
    environment:
      # will access hydra admin through container directly because nginx-proxy doesn't support multiple ports per virtual host
      - ADMIN_URL=${BANK_HYDRA_ADMIN_URL}
      - SERVE_PORT=3900
      - TLS_CACERTS=/etc/tls/trustbloc-dev-ca.crt
      - VIRTUAL_HOST=mock-bank-consent-login.trustbloc.local
      - LOGIN_CONSENT_MODE=bank
    ports:
      - 3900:3900
    volumes:
      - ../keys/tls:/etc/tls
    networks:
      - demo-net

  mock.bank.hydra.trustbloc.local:
    container_name: mock.bank.hydra.trustbloc.local
    image: oryd/hydra:v1.3.2-alpine
    ports:
      - ${MOCKBANK_HYDRA_PUBLIC_PORT}:${MOCKBANK_HYDRA_PUBLIC_PORT} # Public port
      - ${MOCKBANK_HYDRA_ADMIN_PORT}:${MOCKBANK_HYDRA_ADMIN_PORT} # Admin port
    command:  /bin/sh -c "hydra migrate sql --read-from-env --yes;tmp/hydra_configure.sh& hydra serve all"
    entrypoint: ""
    environment:
      - DSN=mysql://root:secret@tcp(mysql:3306)/mysql?max_conns=20&max_idle_conns=4
      - URLS_SELF_ISSUER=https://mock-bank.trustbloc.local
      - URLS_CONSENT=https://mock-bank-consent-login.trustbloc.local/consent
      - URLS_LOGIN=https://mock-bank-consent-login.trustbloc.local/login
      - URLS_LOGOUT=https://mock-bank-consent-login.trustbloc.local/logout
      - SECRETS_SYSTEM=testSecretsSystem
      - OIDC_SUBJECT_TYPES_SUPPORTED=public
      - OIDC_SUBJECT_TYPE_PAIRWISE_SALT=testSecretsSystem
      - SERVE_PUBLIC_PORT=${MOCKBANK_HYDRA_PUBLIC_PORT}
      - SERVE_ADMIN_PORT=${MOCKBANK_HYDRA_ADMIN_PORT}
      - SERVE_TLS_KEY_PATH=/etc/tls/trustbloc.local.key
      - SERVE_TLS_CERT_PATH=/etc/tls/trustbloc.local.crt
      - VIRTUAL_HOST=mock-bank.trustbloc.local
      - VIRTUAL_PORT=${MOCKBANK_HYDRA_PUBLIC_PORT}
      - VIRTUAL_PROTO=https
    restart: unless-stopped
    volumes:
      - ../keys/tls:/etc/tls
    depends_on:
      - mysql
    networks:
      - demo-net

networks:
  demo-net:
    driver: bridge
