#
# SecureKey Technologies Inc. All Rights Reserved.
#
# Inspired by: https://www.ory.sh/docs/hydra/5min-tutorial
#
# SPDX-License-Identifier: Apache-2.0
#

version: '3'

services:

  hydra:
    image: oryd/hydra:v1.2.1-alpine
    ports:
      - "4444:4444" # Public port
      - "4445:4445" # Admin port
      - "5555:5555" # Port for hydra token user
    command:  /bin/sh -c "tmp/hydra_configure.sh& hydra serve all --dangerous-force-http"
    entrypoint: ""
    environment:
      - DSN=mysql://user:secret@secret(mysql:3306)/mysql?max_conns=20&max_idle_conns=4
      - URLS_SELF_ISSUER=http://127.0.0.1:4444
      - URLS_CONSENT=http://127.0.0.1:3000/consent
      - URLS_LOGIN=http://127.0.0.1:3000/login
      - URLS_LOGOUT=http://127.0.0.1:3000/logout
      - DSN=memory
      - SECRETS_SYSTEM=testSecretsSystem
      - OIDC_SUBJECT_TYPES_SUPPORTED=public,pairwise
      - OIDC_SUBJECT_TYPE_PAIRWISE_SALT=testSecretsSystem
    restart: unless-stopped
    volumes:
      - ./hydra_configure.sh:/tmp/hydra_configure.sh
    depends_on:
      - mysql

  consent:
    environment:
      - HYDRA_ADMIN_URL=http://hydra:4445
    image: oryd/hydra-login-consent-node:v1.0.0-rc.10
    ports:
      - "3000:3000"
    restart: unless-stopped

  oathkeeper-proxy:
    image: oryd/oathkeeper:v0.35.1-alpine
    ports:
      - "4455:4455"
    depends_on:
      - hydra
    command:
      serve proxy --config /oathkeeper/config.yaml
    environment:
      - LOG_LEVEL=debug
      - PORT=4455
      - ISSUER_URL=http://localhost:4455/
    restart: on-failure
    volumes:
      - ../oathkeeper:/oathkeeper

  strapi:
    container_name: strapi
    image: strapi/strapi:3.0.0-beta.18.6-alpine
    entrypoint: ""
    command:  /bin/sh -c "/usr/local/bin/docker-entrypoint.sh strapi;/tmp/strapi_configure.sh& strapi develop"
    environment:
      - DATABASE_CLIENT=mysql
      - DATABASE_HOST=mysql
      - DATABASE_PORT=3306
      - DATABASE_NAME=strapi
      - DATABASE_USERNAME=user
      - DATABASE_PASSWORD=secret
      - VIRTUAL_HOST=cms.trustbloc.local
    ports:
      - 1337:1337
    volumes:
      - ./strapi_configure.sh:/tmp/strapi_configure.sh
      - ../oathkeeper:/oathkeeper
    depends_on:
      - mysql

  mysql:
    container_name: mysql
    image: mysql:8.0.18
    restart: always
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_DATABASE: strapi
      MYSQL_USER: user
      MYSQL_PASSWORD: secret
      MYSQL_ROOT_PASSWORD: secret
    logging:
      driver: "none"

  issuer.example.com:
    container_name: issuer.example.com
    image: ${ISSUER_IMAGE}:latest
    environment:
      - ISSUER_HOST_URL=0.0.0.0:5556
      - OAUTH2_ENDPOINT_AUTH_URL=http://127.0.0.1:4444/oauth2/auth
      - OAUTH2_ENDPOINT_TOKEN_URL=http://hydra:4444/oauth2/token
      - OAUTH2_ISSUER_CLIENT_REDIRECT_URL=https://127.0.0.1:5556/callback
      - OAUTH2_ISSUER_CLIENT_ID=auth-code-client
      - OAUTH2_ISSUER_CLIENT_SECRET=secret
      - OAUTH2_ISSUER_CLIENT_SCOPES=studentcard
      - OAUTH2_ENDPOINT_TOKEN_INTROSPECTION_URL=http://hydra:4445/oauth2/introspect
      - ISSUER_TLS_CERT_FILE=/etc/tls/localhost.crt
      - ISSUER_TLS_KEY_FILE=/etc/tls/localhost.key
      - ISSUER_CMS_URL=http://oathkeeper-proxy:4455
      - ISSUER_VCS_URL=http://vcs.example.com:8070
      - ISSUER_VCS_PROFILE=demo
      - VIRTUAL_HOST=issuer.trustbloc.local
      - VIRTUAL_PROTO=https
    ports:
      - 5556:5556
    command: start
    volumes:
      - ../keys/tls:/etc/tls

  rp.example.com:
    container_name: rp.example.com
    image: ${RP_IMAGE}:latest
    environment:
      - RP_HOST_URL=0.0.0.0:5557
      - RP_TLS_CERT_FILE=/etc/tls/localhost.crt
      - RP_TLS_KEY_FILE=/etc/tls/localhost.key
      - RP_VCS_URL=http://vcs.example.com:8070
      - VIRTUAL_HOST=rp.trustbloc.local
      - VIRTUAL_PROTO=https
    ports:
      - 5557:5557
    command: start
    volumes:
      - ../keys/tls:/etc/tls

  vcs.example.com:
    container_name: vcs.example.com
    image: ${VCS_IMAGE}:${VCS_IMAGE_TAG}
    environment:
      - VC_REST_HOST_URL=0.0.0.0:8070
      - EDV_REST_HOST_URL=http://edv.example.com:8081
      - SIDETREE_HOST_URL=http://localhost:48326/document
    ports:
      - 8070:8070
    entrypoint: ""
    command:  /bin/sh -c "/tmp/vcs_configure.sh& vc-rest start"
    volumes:
      - ./vcs_configure.sh:/tmp/vcs_configure.sh
    depends_on:
      - edv.example.com

  edv.example.com:
    container_name: edv.example.com
    image: ${EDV_IMAGE}:${EDV_IMAGE_TAG}
    environment:
     - EDV_HOST_URL=0.0.0.0:8081
    ports:
     - 8081:8081
    command: start

  user.agent.example.com:
    container_name: user.agent.example.com
    image: ${USER_AGENT_WASM_IMAGE}:${USER_AGENT_WASM_IMAGE_TAG}
    environment:
      - HTTP_SERVER_HOST_URL=0.0.0.0:8091
      - TLS_CERT_FILE=/etc/tls/localhost.crt
      - TLS_KEY_FILE=/etc/tls/localhost.key
      - VIRTUAL_HOST=myagent.trustbloc.local
      - VIRTUAL_PROTO=https
    ports:
      - 8091:8091
    volumes:
      - ../keys/tls:/etc/tls
    command: start

  router.agent.example.com:
    container_name: router.agent.example.com
    image: ${ARIES_AGENT_REST_IMAGE}:${ARIES_AGENT_REST_IMAGE_TAG}
    environment:
      - ARIESD_API_HOST=${DIDCOMM_ROUTER_HOST}:${DIDCOMM_ROUTER_API_PORT}
      - ARIESD_INBOUND_HOST=${HTTP_SCHEME}@${DIDCOMM_ROUTER_HOST}:${DIDCOMM_ROUTER_HTTP_INBOUND_PORT},${WS_SCHEME}@${DIDCOMM_ROUTER_HOST}:${DIDCOMM_ROUTER_WS_INBOUND_PORT}
      - ARIESD_INBOUND_HOST_EXTERNAL=${HTTP_SCHEME}@http://router.agent.example.com:${DIDCOMM_ROUTER_HTTP_INBOUND_PORT},${WS_SCHEME}@ws://router.agent.example.com:${DIDCOMM_ROUTER_WS_INBOUND_PORT}
      - ARIESD_DB_PATH=${DIDCOMM_ROUTER_DB_PATH}
      - ARIESD_DEFAULT_LABEL=trustbloc-router-agent
      - ARIESD_OUTBOUND_TRANSPORT=${HTTP_SCHEME},${WS_SCHEME}
      - ARIESD_AUTO_ACCEPT=true
      - VIRTUAL_HOST=router.trustbloc.local
      - VIRTUAL_PORT=${DIDCOMM_ROUTER_API_PORT}
      - VIRTUAL_PROTO=http
    ports:
      - ${DIDCOMM_ROUTER_HTTP_INBOUND_PORT}:${DIDCOMM_ROUTER_HTTP_INBOUND_PORT}
      - ${DIDCOMM_ROUTER_WS_INBOUND_PORT}:${DIDCOMM_ROUTER_WS_INBOUND_PORT}
      - ${DIDCOMM_ROUTER_API_PORT}:${DIDCOMM_ROUTER_API_PORT}
    command: start

  nginx-proxy:
    image: jwilder/nginx-proxy
    ports:
      - "${TRUSTBLOC_LOCAL_HTTPS_PORT:-8443}:443"
    volumes:
      - ../keys/tls:/etc/nginx/certs
      - /var/run/docker.sock:/tmp/docker.sock:ro
